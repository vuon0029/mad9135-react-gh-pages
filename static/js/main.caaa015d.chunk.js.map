{"version":3,"sources":["logo.svg","UserList.js","PostList.js","CmtList.js","Info.js","PostsFromUser.js","CmtsFromUser.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","UserList","users","className","map","user","id","key","to","name","email","PostList","posts","post","userId","title","body","CmtList","comments","comment","postId","Info","console","log","useParams","filter","p","parseInt","u","phone","website","company","catchPhrase","address","street","suite","city","zipcode","PostsFromUser","userPosts","CmtsFromUser","userCmts","c","App","useState","setUsers","setPosts","setComments","fetchIt","term","a","URL","fetch","response","ok","Error","statusText","json","useEffect","then","res","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.caaa015d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","  \nimport React, { useEffect, useState } from 'react'\nimport { NavLink } from 'react-router-dom'\n\nfunction UserList ({ users }) {\n  return (\n    <ul className=\"userList\">\n      {users &&\n        users.map(user => (\n          \n          <li className=\"user\" id={user.id} key={user.id}>\n            <div className=\"view\">\n              <div className=\"avatar\"><i className=\"material-icons md-48 md-dark\">account_circle</i></div>\n              <NavLink\n              className='NavLink'\n              to={'/' + user.id+'/info'}>\n                <button className=\"info\"><i className=\"material-icons\">info</i></button>\n              </NavLink>\n            </div>\n            <div className=\"content\">\n              <div className=\"name\">{user.name}</div>\n              <NavLink\n              className='NavLink'\n              key={user.id}\n              to={'/posts/' + user.id}>\n                <button className=\"userBtn\">View Posts</button>\n              </NavLink>\n              <div className=\"email\">{user.email}</div>\n            </div>\n          </li>\n        ))}\n    </ul>\n  )\n}\n\nexport default UserList","  \nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\n// import './UserList.css'\n\nfunction PostList ({ posts }) {\n  return (\n    <ul className=\"postList\">\n      {posts &&\n        posts.map(post => (\n          \n            <li className=\"post\" id={post.userId} key={post.id}>\n            <div className=\"avatar\"><i className=\"material-icons md-48\">notes</i></div>\n            <div className=\"title\">{post.title}</div>\n            <div className=\"body\">{post.body}</div>\n            </li>\n        ))}\n    </ul>\n  )\n}\n\nexport default PostList","  \nimport React from 'react'\nimport { NavLink } from 'react-router-dom'\n\nfunction CmtList ({ comments }) {\n  return (\n    <aside>\n      {comments &&\n        comments.map(comment => (\n          <ul className={`commentsOnPost`} key={comment.id}>\n            <li className=\"comment\" id={comment.postId} key={comment.id}>\n                <div className=\"avatar\"><i className=\"material-icons md-48\">mode_comment</i></div>\n                <div className=\"name\">{comment.name}</div>\n                <div className=\"email\">by {comment.email}</div>\n                <div className=\"body\">{comment.body}</div>\n            </li>\n        </ul>\n        ))}\n    </aside>\n  )\n}\n\nexport default CmtList","import React from 'react'\nimport { useParams, NavLink } from 'react-router-dom'\n\nfunction Info ({ users }) {\n    \n    console.log(users)\n    const { id } = useParams()\n    let user \n    if (users){\n        user = users.filter(p => p.id === parseInt(id))\n    }\n    console.log(user)\n\n    if (!user) return null\n\n    return user.map(u=>{\n        {}\n        return (\n            <div className=\"mainInfo\">\n            <ul className={`user isolate`} id={u.id} key={u.id}>\n                <div className=\"avatar\"><i className=\"material-icons md-48 md-dark\">face</i></div>\n                <div className=\"name\">{u.name}</div>\n                <div className=\"email\"><i className=\"material-icons\">email</i> {u.email}</div>\n                <div className=\"phone\"><i className=\"material-icons\">phone</i> {u.phone}</div>\n                <div className=\"website\"><i className=\"material-icons\">web</i> www.{u.website}</div>\n                <div className=\"company\"><i className=\"material-icons \">work</i> {u.company.name}\n                    <li className=\"company catchPhrase\"><i className=\"material-icons\">format_quote</i>{`${u.company.catchPhrase}`}<i className=\"material-icons\">format_quote</i></li>\n                </div>\n                <div className=\"address\"><i className=\"material-icons md-48\">place</i>\n                    <li className=\"street\">{`${u.address.street}`}</li>\n                    <li className=\"suite\">{`${u.address.suite}`}</li>\n                    <li className=\"city\">{u.address.city}</li>\n                    <li className=\"zipcode\">{u.address.zipcode}</li>\n                </div>\n                <NavLink\n                className='NavLink'\n                key={u.id}\n                to={'/posts/' + u.id}>\n                <button className=\"userBtn\">View Posts</button>\n                </NavLink>\n            </ul>\n            </div>\n\n        )\n    })\n}\n\nexport default Info\n\n// import React from 'react'\n// import { useParams } from 'react-router-dom'\n\n// function Info({users}){\n//     const { id } = useParams()\n//     console.log(id)\n//     let userIsolate \n//     if (users){\n//         userIsolate = users.filter(u => u.id === parseInt(id))\n//     }\n//     console.log(userIsolate.name)\n\n//     if (!userIsolate) return null\n\n//     if (userIsolate != undefined){\n        // return userIsolate.map(post=>{\n        //     return (\n        //         <ul className={`user isolate`} id={userIsolate.id}>\n        //                 <div className=\"avatar\">userAvatar</div>\n        //                 <div className=\"name\">{userIsolate.name}</div>\n        //                 <div className=\"email\">{userIsolate.email}</div>\n        //                 <div className=\"phone\">{userIsolate.phone}</div>\n        //         </ul>\n        //     )\n        // })\n//     }\n// }\n","import React from 'react'\nimport { useParams,NavLink } from 'react-router-dom'\n\nfunction PostsFromUser({posts}){\n\n    const { id } = useParams()\n    let userPosts \n    if (posts){\n        userPosts = posts.filter(p => p.userId === parseInt(id))\n    }\n\n    if (!userPosts) return null\n\n    return (\n        <ul className=\"postList\">\n          {userPosts &&\n            userPosts.map(post => (\n              \n                <li className=\"post\" id={post.userId} key={post.id}>\n                    <div className=\"view\">\n                        <div className=\"avatar\"><i className=\"material-icons md-48\">notes</i></div>\n                        <NavLink\n                        className='NavLink'\n                        key={post.id}\n                        to={`/post/${post.id}/comments`}>\n                            <button className=\"postBtn\">View Comments</button>\n                        </NavLink>\n                    </div>\n                    <div className=\"content\">\n                        <div className=\"title\">{post.title}</div>\n                        <div className=\"body\">{post.body}</div>\n                    </div>\n                </li>\n            ))}\n        </ul>\n      )\n}\n\nexport default PostsFromUser","import React from 'react'\nimport { useParams } from 'react-router-dom'\n\nfunction CmtsFromUser({comments}){\n    const { id } = useParams()\n    let userCmts \n    if (comments){\n        userCmts = comments.filter(c => c.postId === parseInt(id))\n    }\n    console.log(userCmts)\n\n    if (!userCmts) return null\n\n    return (\n        <aside>\n          {userCmts &&\n            userCmts.map(comment => (\n              <ul className={`commentsOnPost`}>\n                <li className=\"comment\" id={comment.userId} key={comment.id}>\n                    <div className=\"view\">\n                        <div className=\"avatar\"><i className=\"material-icons md-48\">mode_comment</i></div>\n                    </div>\n                    <div className=\"content\">\n                        <div className=\"name\">{comment.name}</div>\n                        <div className=\"email\">by {comment.email}</div>\n                        <div className=\"body\">{comment.body}</div>\n                    </div>\n                </li>\n            </ul>\n            ))}\n        </aside>\n      )\n}\n\nexport default CmtsFromUser","import React, { useEffect, useState } from 'react';\nimport logo from './logo.svg';\nimport { HashRouter as Router,\n  NavLink,\n  Route,\n  Switch, } from 'react-router-dom'\nimport './App.css';\nimport UserList from './UserList'\nimport PostList from './PostList'\nimport CmtList from './CmtList'\nimport Info from './Info'\nimport PostsFromUser from './PostsFromUser'\nimport CmtsFromUser from './CmtsFromUser'\n\n\nfunction App() {\n  const [users, setUsers] = useState()\n  const [posts, setPosts] = useState()\n  const [comments, setComments] = useState()\n\n  useEffect(()=>{\n    fetchIt(\"users\").then(res=>setUsers(res))\n    fetchIt(\"posts\").then(res=>setPosts(res))\n    fetchIt(\"comments\").then(res=>setComments(res))\n  },[])\n\n  async function fetchIt (term) {\n    const URL = `https://jsonplaceholder.typicode.com/${term}`\n\n    try {\n      const response = await fetch(URL)\n      if (!response.ok) throw new Error(response.statusText)\n      return response.json()\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav>\n          <NavLink to=\"/\">Users</NavLink>\n          <NavLink to=\"/posts\">Posts</NavLink>\n          <NavLink to=\"/comments\">Comments</NavLink>\n        </nav>\n\n        <main>\n          <Switch>\n\n            <Route exact path=\"/:id/info\">\n              <h2>User Info.</h2>\n              <Info users={users}/>\n            </Route>\n\n            <Route exact path=\"/\">\n              <h2>Users</h2>\n              <UserList users={users}/>\n            </Route>\n\n            <Route exact path=\"/posts\">\n              <h2>Posts</h2>\n              <PostList posts={posts}/>\n            </Route>\n\n            <Route exact path=\"/posts/:id\">\n              <h2>Posts</h2>\n              <PostsFromUser posts={posts} />\n            </Route>\n\n            <Route exact path=\"/comments\">\n              <h2>Comments</h2>\n              <CmtList comments={comments} />\n            </Route>\n\n            <Route exact path=\"/post/:id/comments\">\n              <h2>Comments</h2>\n              <CmtsFromUser comments={comments} />\n            </Route>\n            \n          </Switch>\n\n        </main>\n      </div>\n      </Router>\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}